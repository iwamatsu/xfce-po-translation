dnl $Id: configure.in.in 3434 2007-10-24 22:36:53Z kelnos $
dnl
dnl Copyright 2006 Christian Hammond
dnl Ported to Xfce by Nick Schermer <nick@xfce.org>
dnl

dnl ********************
dnl *** version info ***
dnl ********************
m4_define([notification_daemon_version_major], [0])
m4_define([notification_daemon_version_minor], [3])
m4_define([notification_daemon_version_micro], [8])
m4_define([notification_daemon_version_build], [r@REVISION@])
m4_define([notification_daemon_version_tag], [svn])

m4_define([notification_daemon_version], [notification_daemon_version_major().notification_daemon_version_minor().notification_daemon_version_micro()ifelse(notification_daemon_version_tag(), [svn], [notification_daemon_version_tag()-notification_daemon_version_build()], [notification_daemon_version_tag()])])

dnl *********************
dnl *** init autoconf ***
dnl *********************
AC_INIT([notification-daemon-xfce], [notification_daemon_version], [http://bugzilla.xfce.org/])
AC_PREREQ([2.50])

dnl *********************
dnl *** init automake ***
dnl *********************
AM_INIT_AUTOMAKE([1.8 dist-bzip2 tar-ustar])
AM_CONFIG_HEADER([config.h])
AM_MAINTAINER_MODE()

dnl ********************************
dnl *** check for basic programs ***
dnl ********************************
AC_PROG_CC()
AC_PROG_INSTALL()
AC_PROG_LIBTOOL()
AC_PROG_INTLTOOL()

dnl ***************************
dnl *** version information ***
dnl ***************************
NOTIFICATION_DAEMON_MAJOR_VERSION=notification_daemon_version_major()
NOTIFICATION_DAEMON_MINOR_VERSION=notification_daemon_version_minor()
NOTIFICATION_DAEMON_MICRO_VERSION=notification_daemon_version_micro()
AC_DEFINE_UNQUOTED(NOTIFICATION_DAEMON_MAJOR_VERSION, $NOTIFICATION_DAEMON_MAJOR_VERSION, [Major])
AC_DEFINE_UNQUOTED(NOTIFICATION_DAEMON_MINOR_VERSION, $NOTIFICATION_DAEMON_MINOR_VERSION, [Minor])
AC_DEFINE_UNQUOTED(NOTIFICATION_DAEMON_MICRO_VERSION, $NOTIFICATION_DAEMON_MICRO_VERSION, [Micro])

dnl ***************************************
dnl *** check for standard header files ***
dnl ***************************************
AC_HEADER_STDC()
AC_CHECK_HEADERS([stdlib.h errno.h string.h stdio.h])

dnl ******************************
dnl *** check for i18n support ***
dnl ******************************
XDT_I18N([@LINGUAS@])

dnl *************************
dnl *** required packages ***
dnl *************************
XDT_CHECK_PACKAGE([GTHREAD], [gthread-2.0], [2.6.0])
XDT_CHECK_PACKAGE([GTK], [gtk+-2.0], [2.6.0])
XDT_CHECK_PACKAGE([LIBXFCE4UTIL], [libxfce4util-1.0], [4.3.90])
XDT_CHECK_PACKAGE([LIBXFCEGUI4], [libxfcegui4-1.0], [4.3.90])
XDT_CHECK_PACKAGE([DBUS_GLIB], [dbus-glib-1], [0.36])
XDT_CHECK_PACKAGE([DBUS], [dbus-1], [0.36])
XDT_CHECK_PACKAGE([LIBSEXY], [libsexy], [0.1.3])

dnl *************************
dnl *** optional packages ***
dnl *************************
XDT_CHECK_OPTIONAL_PACKAGE([XFCE_MCS_MANAGER], [xfce-mcs-manager], [4.2.2],
                           [mcs-plugin], [xfce-mcs-manager], [yes])

XDT_CHECK_OPTIONAL_PACKAGE([LIBNOTIFY], [libnotify], [0.4.0],
                           [settings-preview], [libnotify], [yes])

dnl ******************************************************
dnl *** disable the close button in the standard theme ***
dnl ******************************************************
AC_ARG_ENABLE([close-button],
              AC_HELP_STRING([--disable-close-button],
                             [Don't show the close button in the default theme.]),
              [ac_enable_close_button=$enableval], [ac_enable_close_button=yes])
AC_MSG_CHECKING([whether to show the close button in default theme])
AC_MSG_RESULT([$ac_enable_close_button])
if test x"$ac_enable_close_button" = x"yes"; then
  AC_DEFINE([ENABLE_CLOSE_BUTTON], [1], [Define to 1 to show the close button.])
fi

dnl ******************************************************
dnl *** enable the gradient look in the standard theme ***
dnl ******************************************************
AC_ARG_ENABLE([gradient-look],
              AC_HELP_STRING([--enable-gradient-look],
                             [Show a gradient look in the default theme.]),
              [ac_enable_gradient_look=$enableval], [ac_enable_gradient_look=no])
AC_MSG_CHECKING([whether to show a gradient look in the default theme])
AC_MSG_RESULT([$ac_enable_gradient_look])
if test x"$ac_enable_gradient_look" = x"yes"; then
  AC_DEFINE([ENABLE_GRADIENT_LOOK], [1], [Define to 1 to show the gradient look.])
fi

dnl ***********************************
dnl *** check for debugging support ***
dnl ***********************************
XDT_FEATURE_DEBUG()

AC_OUTPUT([
Makefile
po/Makefile.in
src/Makefile
src/daemon/Makefile
src/settings/Makefile
src/themes/Makefile
src/themes/bubble/Makefile
src/themes/standard/Makefile
icons/Makefile
icons/22x22/Makefile
icons/48x48/Makefile
])

dnl ***************************
dnl *** Print configuration ***
dnl ***************************
echo
echo "Build Configuration:"
echo
if test x"$XFCE_MCS_MANAGER_FOUND" = x"yes"; then
echo "* Xfce Settings Manager Wrapper:      yes"
else
echo "* Xfce Settings Manager Wrapper:      no"
fi
if test x"$LIBNOTIFY_FOUND" = x"yes"; then
echo "* Preview in Settings Dialog:         yes"
else
echo "* Preview in Settings Dialog:         no"
fi
echo "* Show Close Button:                  $ac_enable_close_button"
echo "* Gradient Look:                      $ac_enable_gradient_look"
echo "* Debug Support:                      $enable_debug"
echo
