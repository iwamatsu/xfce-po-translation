dnl configure.ac
dnl
dnl xfmedia - a simple media player for the xfce desktop environment
dnl

dnl version info
m4_define([xfmedia_version_major], [0])
m4_define([xfmedia_version_minor], [10])
m4_define([xfmedia_version_micro], [0])
m4_define([xfmedia_version_build], [r@REVISION@])
m4_define([xfmedia_version_tag], [svn])
m4_define([xfmedia_version], [xfmedia_version_major().xfmedia_version_minor().xfmedia_version_micro()ifelse(xfmedia_version_tag(), [svn], [xfmedia_version_tag()-xfmedia_version_build()], [xfmedia_version_tag()])])

dnl init autoconf
AC_INIT([xfmedia], [xfmedia_version], [http://bugzilla.xfce.org/])
AC_PREREQ([2.50])

dnl init automake
XFMEDIA_VERSION=xfmedia_version
AM_INIT_AUTOMAKE([dist-bzip2])
AM_CONFIG_HEADER([config.h])
AC_DEFINE([WEBSITE], ["http://spuriousinterrupt.org/projects/xfmedia"],
	[Location of the xfmedia website])
AM_MAINTAINER_MODE

dnl check for UNIX variants
AC_AIX
AC_ISC_POSIX
AC_MINIX

dnl check for basic programs
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LIBTOOL
AC_PROG_INTLTOOL([0.31], [no-xml])
AC_PROG_MAKE_SET

dnl check for standard header files
AC_HEADER_STDC
AC_CHECK_HEADERS(errno.h fcntl.h getopt.h math.h signal.h stdarg.h stddef.h string.h sys/mman.h sys/select.h sys/socket.h sys/stat.h sys/time.h sys/types.h sys/un.h sys/wait.h time.h unistd.h varargs.h)
AC_CHECK_FUNCS(mmap sigaction srandom)

dnl get svn revision
SVN=`which svn`
if test "$SVN" -a -x "$SVN"; then
    dir="`dirname $0`"
    SVN_REVISION=`LC_ALL=C svn info "$dir" | awk '/^Revision: / {printf "%05d\n", $2}'`
fi
if test -z "$SVN_REVISION"; then
    SVN_REVISION="@REVISION@"
fi
AC_DEFINE_UNQUOTED([SVN_REVISION], "$REVISION", [subversion revision number])
AC_SUBST([SVN_REVISION])

dnl check GNU getopt() - thanks libcmml!
HAVE_GETOPT_LONG="no"
AC_CHECK_FUNC([getopt_long], [HAVE_GETOPT_LONG="yes"])
if test "x$HAVE_GETOPT_LONG" != xyes ; then
	dnl FreeBSD has a gnugetopt library
	AC_CHECK_LIB([gnugetopt], [getopt_long], [HAVE_GETOPT_LONG="yes"])
	if test "x$HAVE_GETOPT_LONG" = xyes ; then
		GETOPT_LONG_LIBS="-lgnugetopt"
		AC_SUBST(GETOPT_LONG_LIBS)
	fi
fi
if test "x$HAVE_GETOPT_LONG" != "xyes"; then
	GETOPT_LONG_LIBS=""
	AC_SUBST(GETOPT_LONG_LIBS)
fi
AM_CONDITIONAL([USE_LOCAL_GETOPT], [test "x$HAVE_GETOPT_LONG" != "xyes"])

dnl Check for i18n support
XDT_I18N([@LINGUAS@])

dnl Check for X11 installed
XDT_CHECK_LIBX11_REQUIRE
XDT_CHECK_LIBSM

dnl check for XSCREENSAVER extension
saved_cflags="$CFLAGS"
saved_libs="$LIBS"
CFLAGS="$CFLAGS $LIBX11_CFLAGS"
LIBS="$LIBS $LIBX11_LDFLAGS $LIBX11_LIBS"
AC_CHECK_LIB([Xss], [XScreenSaverQueryExtension],
	[
		LIBX11_LIBS="$LIBX11_LIBS -lXss"
		AC_DEFINE([HAVE_XSCREENSAVER_EXTENSION], [1], [Define if XSCREENSAVER is present])
	])
CFLAGS="$saved_cflags"
LIBS="$saved_libs"
AC_SUBST(LIBX11_LIBS)

dnl check for XTEST extension
saved_cflags="$CFLAGS"
saved_libs="$LIBS"
CFLAGS="$CFLAGS $LIBX11_CFLAGS"
LIBS="$LIBS $LIBX11_LDFLAGS $LIBX11_LIBS"
AC_CHECK_LIB([Xtst], [XTestQueryExtension],
	[
		LIBX11_LIBS="$LIBX11_LIBS -lXtst"
		AC_DEFINE([HAVE_XTESTEXTENSION], [1], [Define if XTEST is present])
	])
CFLAGS="$saved_cflags"
LIBS="$saved_libs"
AC_SUBST(LIBX11_LIBS)

dnl required
XDT_CHECK_PACKAGE([GMODULE], [gmodule-2.0], [2.6.0])
XDT_CHECK_PACKAGE([GTHREAD], [gthread-2.0], [2.6.0])
XDT_CHECK_PACKAGE([GOBJECT], [gobject-2.0], [2.6.0])
XDT_CHECK_PACKAGE([GLIB], [glib-2.0], [2.6.0])
XDT_CHECK_PACKAGE([GTK], [gtk+-2.0], [2.6.0])
XDT_CHECK_PACKAGE([LIBXFCE4UTIL], [libxfce4util-1.0], [4.2.0])
XDT_CHECK_PACKAGE([LIBXFCEGUI4], [libxfcegui4-1.0], [4.2.0])
XDT_CHECK_PACKAGE([LIBXINE], [libxine], [1.0.0])

dnl look for xine_plugins_garbage_collector().  need to check for a version
dnl >= 1.0.3 or 1.1.1.  earlier releases of xine-lib had a bug where calling
dnl the garbage collector would cause a crash when changing cd/dvd devices.
AC_MSG_CHECKING([for a safe xine_plugins_garbage_collector()])
my_xine_major=`echo $LIBXINE_VERSION | cut -d'.' -f1`
my_xine_minor=`echo $LIBXINE_VERSION | cut -d'.' -f2`
my_xine_micro=`echo $LIBXINE_VERSION | cut -d'.' -f3`
if test $my_xine_major -gt 1 \
    || test $my_xine_major -eq 1 -a $my_xine_minor -gt 1 \
    || test $my_xine_major -eq 1 -a $my_xine_minor -eq 0 -a $my_xine_micro -ge 3 \
    || test $my_xine_major -eq 1 -a $my_xine_minor -eq 1 -a $my_xine_micro -ge 1
then
    AC_MSG_RESULT([found])
	AC_DEFINE([HAVE_SAFE_XINE_PLUGINS_GC], [1], [Define if we can unload xine plugins safely])
else
    AC_MSG_RESULT([not found])
fi

dnl depend on libexo-0.3, with 0.2 as a fallback
XDT_CHECK_OPTIONAL_PACKAGE([EXO], [exo-0.3], [0.3.0], [exo],
	[libexo extension library support (required)], [yes])
if test "x$EXO_FOUND" != "xyes"; then
	XDT_CHECK_PACKAGE([EXO], [exo-0.2], [0.2.0])
fi

dnl optional
XDT_CHECK_OPTIONAL_PACKAGE([LIBSTARTUP_NOTIFICATION],
	[libstartup-notification-1.0], [0.5], [startup-notification],
	[startup notification library], [yes])

dnl check for d-bus support.  first look for >=0.31, for the new api, and then
dnl check for the old api

XDT_CHECK_OPTIONAL_PACKAGE([DBUS], [dbus-glib-1], [0.31], [dbus],
	[D-BUS support (new api)], [yes])
if test "x$DBUS_FOUND" != "xyes"; then
	XDT_CHECK_OPTIONAL_PACKAGE([DBUS], [dbus-glib-1], [0.22], [dbus],
		[D-BUS support (old api)], [yes])
	if test "x$DBUS_FOUND" = "xyes"; then
		AC_DEFINE([DBUS_USE_OLD_API], [1], [Define if D-BUS uses the old 0.2x API])
	fi
fi

dnl check for taglib.  unfortunately it doesn't provide a .pc file.
check_taglib=yes
found_taglib=no
TAGLIB_CFLAGS=
TAGLIB_LIBS=

AC_ARG_WITH([taglib],
	AC_HELP_STRING([--with-taglib],
		[Use taglib for metadata editing (default=yes)]),
	[
	if test "x$withval" = "xno"; then
		check_taglib=no
	fi
	])

if test "x$check_taglib" = "xyes"; then
	AC_PATH_PROG([TAGLIB_CONFIG], [taglib-config])
fi
if test "x$check_taglib" = "xyes"; then
	if test "x$TAGLIB_CONFIG" = "x"; then
		AC_MSG_CHECKING([for taglib])
		AC_MSG_RESULT([not found])
	else
		TAGLIB_CFLAGS=`$TAGLIB_CONFIG --cflags`
		TAGLIB_LIBS=`$TAGLIB_CONFIG --libs`
		TAGLIB_VERSION=`$TAGLIB_CONFIG --version`
		
		dnl this is so incredibly stupid
		TAGLIB_LIBS=`echo $TAGLIB_LIBS | sed -e 's/-ltag/-ltag_c/;'`
		
		dnl and this is stupider
		saved_CFLAGS="$CFLAGS"
		saved_LIBS="$LIBS"
		CFLAGS="$CFLAGS $TAGLIB_CFLAGS"
		LIBS="$LIBS $TAGLIB_LIBS"
		AC_CHECK_HEADER([taglib/tag_c.h], [found_tag_c_h=yes])
		CFLAGS="$saved_CFLAGS"
		LIBS="$saved_LIBS"
		
		if test "x$found_tag_c_h" = "xyes"; then
			AC_DEFINE([HAVE_TAGLIB], [1], [Define if taglib is present])
			AC_MSG_CHECKING([for taglib])
			AC_MSG_RESULT([$TAGLIB_VERSION])
			
			AC_MSG_CHECKING([TAGLIB_CFLAGS])
			AC_MSG_RESULT([$TAGLIB_CFLAGS])
			AC_MSG_CHECKING([TAGLIB_LIBS])
			AC_MSG_RESULT([$TAGLIB_LIBS])
		else
			AC_MSG_CHECKING([for taglib])
			AC_MSG_RESULT([not found])
		fi
	fi
else
	AC_MSG_CHECKING([for taglib])
	AC_MSG_RESULT([disabled])
fi

AC_SUBST([TAGLIB_CFLAGS])
AC_SUBST([TAGLIB_LIBS])

dnl check for docbook
BT_CHECK_DOCBOOK

dnl check for debugging support
XDT_FEATURE_DEBUG
if test "x$enable_debug" = "xfull"; then
	if test "x$CC" = "xgcc"; then
		CFLAGS="$CFLAGS -fno-strict-aliasing"
	fi
fi

AC_OUTPUT([
Makefile
doc/Makefile
doc/catalog.xml
doc/version
doc/C/Makefile
doc/C/xml/Makefile
pixmaps/Makefile
plugins/Makefile
plugins/infopipe/Makefile
po/Makefile.in
src/Makefile
xfmedia/Makefile
xfmedia/xfmedia-plugin.pc
xfmedia.spec
])
